version: '3.4'

services:

  postgresql_server:
    build: ./database/
    image: denishuaman/postgresql_ventas:latest
    environment:
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=ventas
    volumes:
      - my-data-postgresql:/var/lib/postgresql/
    networks:
      - backend
    deploy:
     replicas: 1
     resources:
       limits:
         cpus: "0.3"
         memory: 512M
     restart_policy:
       condition: on-failure
     placement:
       constraints: [node.role == worker]

  apiventa:
    build: ./apiVenta/
    image: denishuaman/api-venta:latest
    environment:
      - hostapi=http://apipersona:8081
      - host=postgresql_server
      - port=5432
      - database=ventas
      - username=postgres
      - password=root
    depends_on:
      - postgresql_server
    entrypoint: dockerize -wait tcp://postgresql_server:5432 -timeout 10m java -jar /app.jar
    networks:
      - backend
    deploy:
     replicas: 1
     resources:
       limits:
         cpus: "0.2"
         memory: 512M
     restart_policy:
       condition: on-failure
     placement:
       constraints: [node.role == worker]

  apipersona:
    build: ./apiPersona/
    image: denishuaman/api-persona:latest
    environment:
      - host=postgresql_server
      - port=5432
      - database=ventas
      - username=postgres
      - password=root
    depends_on:
      - postgresql_server
    entrypoint: dockerize -wait tcp://postgresql_server:5432 -timeout 10m java -jar /app.jar
    networks:
      - backend
    deploy:
     replicas: 1
     resources:
       limits:
         cpus: "0.1"
         memory: 256M
     restart_policy:
       condition: on-failure
     placement:
       constraints: [node.role == worker]

  proxy:
    build: ./proxy-backend/
    image: denishuaman/proxy-venta:latest
    ports:
      - "80:80"
    depends_on: 
      - apipersona
      - apiventa
    restart: on-failure
    networks:
      - backend
    deploy:
     replicas: 2
     resources:
       limits:
         cpus: "0.2"
         memory: 256M
     restart_policy:
       condition: on-failure
     placement:
       constraints: [node.role == manager]

volumes:
  my-data-postgresql:
networks:
  backend: